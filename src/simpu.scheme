00001	ADD     R1  R2  R3              Add                         R1 = R2 + R3
00010	SUB     R1  R2  R3              Subtract	                R1 = R2 - R3
00011	AND     R1  R2  R3              AND (Bitwise)	            R1 = R2 & R3
00100	OR      R1  R2  R3              OR (Bitwise)	            R1 = R2 | R3
00101	SLL     R1  R2  SA               Shift Left Logical	        R1 = R2 << Shift Amount
00110	SRL     R1  R2  SA              Shift Right Logical	        R1 = R2 >> Shift Amount
00111	MAX     R1  R2  R3              Max	                        R1 = Max ( R2 , R3 )
01000	SLT     R1  R2  R3              Set on Less Than	        if ( R2 < R3 ) then R1 = 1 , else R1 = 0
01001	MUL     R1  R2  R3  R4          Multiply	                {R1 , R2} = R3 × R4
01010	MOV     R1  R2                  Move	                    R1 = R2
01011	ADDNDR  R1  R2  R3              Add Indirect	            R1 = Mem[R2] + Mem[R3]
01100	LUI     R1  I                   Load Upper Immediate	    R1[31:16] = Imm , R1[15:0] = 0x0000
01101	ADDI    R1  R2  I               Add Immediate	            R1 = R2 + SE(Imm)
01110	ORI     R1  R2  I               OR Immediate	            R1 = R2 | Imm
01111	SLTI    R1  R2  I               Set on Less Than Immediate	if ( R2 < Imm ) then R1 = 1 , else R1 = 0
10000	BEQ     R1  R2  I/L             Branch if Equal	            if (R1 == R2) then PC  Address
10001	BNEQ    R1  R2  I/L             Branch if Not Equal	        if ( R1 != R2) then PC  Address
10010	JR      R1                      Jump Register	            PC  R1[7:0]
10011	J      	I/L                     Jump                        PC  Address
10100	LW      R1  I/L                 Load Word	                R1 = Mem[Address]
10101	ADDM    R1  R2  I/L             Add Memory	                R1 = R2 + Mem[Address]
10110	SW      R1  I/L                 Store Word	                Mem[Address]  R1
11011   SWNDR   R2  R3                  Store Indirect              Mem[R2} = R1
